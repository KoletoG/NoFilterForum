@using System.Web
@using Core.Constants
@using Core.Enums
@using Web.ViewModels
@using Web.ViewModels.Post
@using Web.ViewModels.Reply
@using Web.ViewModels.Report


@model IndexReplyViewModel
<script src="~/js/JSLikesDislikes.js" asp-append-version="true"> </script>
<body class="mainBG">
	<div class="container secondaryBG shadow p-3">
		@if (Model.Post.Username != UserConstants.DefaultUser.UserName)
		{
			<div class="row borderBottom">

				<div class="col-10 text-center align-content-center">

					<h1 class="fw-bold mainText">@Model.Post.Title</h1>
				</div>
				<div class="col-2 borderStart text-center pt-2 mb-2">
					<partial name="_RoleColor" model="new RoleViewModel(Model.Post.Role,Model.Post.UserId,Model.Post.Username,true, Model.Post.ImageUrl)" />
				</div>
			</div>
			<div class="row mt-3">
				<div class="col-10 borderEnd">

					<h5 class="fs-5 text-break secondaryText">@Html.Raw(Model.Post.Content)</h5>
				</div>
				<div class="col-2 text-center align-content-center">

					@if (Model.CurrentUser.LikesPostRepliesIds.Contains(Model.Post.Id))
					{
						<partial name="_LikeDislike" model="new LikeDislikeViewModel(Model.Post.Id,true,true,true)" />
						<h6 class="mainText" id="likesCount_id_@Model.Post.Id">@Model.Post.Likes</h6>
						<partial name="_LikeDislike" model="new LikeDislikeViewModel(Model.Post.Id,true,false,false)" />
					}
					else if (Model.CurrentUser.DislikesPostRepliesIds.Contains(Model.Post.Id))
					{
						<partial name="_LikeDislike" model="new LikeDislikeViewModel(Model.Post.Id,true,true,false)" />
						<h6 class="mainText" id="likesCount_id_@Model.Post.Id">@Model.Post.Likes</h6>
						<partial name="_LikeDislike" model="new LikeDislikeViewModel(Model.Post.Id,true,false,true)" />
					}
					else
					{
						<partial name="_LikeDislike" model="new LikeDislikeViewModel(Model.Post.Id,true,true,false)" />
						<h6 class="mainText" id="likesCount_id_@Model.Post.Id">@Model.Post.Likes</h6>
						<partial name="_LikeDislike" model="new LikeDislikeViewModel(Model.Post.Id,true,false,false)" />
					}
					@if (Model.Post.Username == this.User!.Identity!.Name! || Model.IsAdmin)
					{
						<partial name="_DeletePost" model="new DeletePostViewModel(){PostId=Model.Post.Id}" />
					}
					else
					{
						<partial name="_CreateReport" model="new CreateReportViewModel(true,Model.Post.Id,Model.Post.UserId)" />
					}
				</div>
			</div>
			<div class="row">
				<div class="col-10">
					<h6 class="text-end mainText"><partial name="_ShowTime" model="new ShowTimeViewModel(Model.Post.DateCreated)" /></h6>
				</div>
			</div>
		}
		else
		{
			<h5 style="text-decoration:line-through">@Model.Post.Username</h5>
		}
		@{
			<div class="row mt-3 mb-3 borderTop borderBottom">
				<partial name="_CreateReply" model="new CreateReplyViewModel(){PostId=Model.Post.Id}" />
			</div>
			int count = Model.Replies.Count;
			@for (int i = 0; i < count; i++)
			{
				var reply = Model.Replies[i];
				<div class="row  secondaryBG borderBottom borderTop">
					<div class="col-2 align-content-center borderEnd text-center">
						<partial name="_RoleColor" model="new RoleViewModel(reply.Role,reply.UserId,reply.Username,true,reply.ImageUrl)" />

					</div>

					<div class="col-8 pt-2 pb-2">

						@if (reply.Id == Model.ReplyId)
						{
							<h6 id="idrep_@reply.Id" style="background-color:lightgrey;">@Html.Raw(reply.Content)</h6>
						}
						else
						{
							<h6 class="text-break secondaryText" style="min-height:75px">@Html.Raw(reply.Content)</h6>

						}
						<h6 class="mainText text-end"><partial name="_ShowTime" model="new ShowTimeViewModel(reply.DateCreated)" /></h6>

						<div class="row borderTop justify-content-center align-content-center pt-1">

							<div class="text-break col" style="height:100px">
								<h6 class="secondaryText fst-italic">@reply.Bio</h6>
							</div>
						</div>
					</div>
					@if (reply.Username != UserConstants.DefaultUser.UserName)
					{
						// refactor these likes dislikes type shi
						<div class="col-2 borderStart pt-2 text-center flex-column d-flex">
							<h6 class="text-center fst-italic secondaryText flex-grow-0">#@(i + 1)</h6>
							<div class="flex-grow-1 align-content-center">
								@if (Model.CurrentUser.LikesPostRepliesIds.Contains(reply.Id))
								{
									<partial name="_LikeDislike" model="new LikeDislikeViewModel(reply.Id,false,true,true)" />
									<h6 id="likesCount_id_@reply.Id" class="mainText">@reply.Likes</h6>
									<partial name="_LikeDislike" model="new LikeDislikeViewModel(reply.Id,false,false,false)" />
								}
								else if (Model.CurrentUser.DislikesPostRepliesIds.Contains(reply.Id))
								{
									<partial name="_LikeDislike" model="new LikeDislikeViewModel(reply.Id,false,true,false)" />
									<h6 id="likesCount_id_@reply.Id" class="mainText">@reply.Likes</h6>
									<partial name="_LikeDislike" model="new LikeDislikeViewModel(reply.Id,false,false,true)" />
								}
								else
								{
									<partial name="_LikeDislike" model="new LikeDislikeViewModel(reply.Id,false,true,false)" />
									<h6 id="likesCount_id_@reply.Id" class="mainText">@reply.Likes</h6>
									<partial name="_LikeDislike" model="new LikeDislikeViewModel(reply.Id,false,false,false)" />
								}
								@if (reply.Username == this.User!.Identity!.Name! || Model.IsAdmin)
								{
									<partial name="_DeleteReply" model="new DeleteReplyViewModel(){PostId=Model.Post.Id,ReplyId=reply.Id}" />
								}
								else
								{
									<partial name="_CreateReport" model="new CreateReportViewModel(false,reply.Id,reply.UserId)" />
								}
							</div>
						</div>
					}
					else
					{
						<h5 style="text-decoration:line-through">@reply.Username</h5>
					}
				</div>
			}
			<br />
			@if (Model.Replies.Any())
			{
				<div class="row borderBottom borderTop mt-3 mb-3">
					<partial name="_CreateReply" model="new CreateReplyViewModel(){PostId=Model.Post.Id}" />
				</div>
			}

			<partial name="_Paging" model="new PagingViewModel(Model.Page,Model.TotalPages,Model.ReplyControllerName,Model.IndexName,string.Empty,Model.Post.Id)" />
		}


	</div>
</body>
@section Scripts {
	<partial name="_ValidationScriptsPartial" />
	<script>
		document.addEventListener("DOMContentLoaded", function() {
				var targetLabel = document.getElementById("idrep_@Model.ReplyId");
				if (targetLabel)
				{
					targetLabel.scrollIntoView({ behavior: "smooth", block: "start" });
				}
		});
	</script>
}